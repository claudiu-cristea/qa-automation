diff --git a/src/Collection/FilesCollection.php b/src/Collection/FilesCollection.php
index 9f4970f..efd0931 100644
--- a/src/Collection/FilesCollection.php
+++ b/src/Collection/FilesCollection.php
@@ -207,4 +207,9 @@ class FilesCollection extends ArrayCollection
             return !$file->isLink();
         });
     }
+
+    public function toFileList(): string
+    {
+      return \implode(PHP_EOL, $this->toArray());
+    }
 }
diff --git a/src/Process/InputWritingProcessRunner.php b/src/Process/InputWritingProcessRunner.php
new file mode 100644
index 0000000..1b8a443
--- /dev/null
+++ b/src/Process/InputWritingProcessRunner.php
@@ -0,0 +1,34 @@
+<?php
+
+declare(strict_types=1);
+
+namespace GrumPHP\Process;
+
+use Symfony\Component\Process\InputStream;
+use Symfony\Component\Process\Process;
+
+/**
+ * This runner can be used to run a process whilst writing data to STDIN
+ */
+class InputWritingProcessRunner
+{
+  /**
+   * @param callable(): Process $processBuilder
+   * @param callable(): \Generator<array-key, string, mixed, void> $writer
+   */
+  public static function run(callable $processBuilder, callable $writer): Process
+  {
+    $process = $processBuilder();
+    $inputStream = new InputStream();
+    $process->setInput($inputStream);
+    $process->start();
+    foreach ($writer() as $input) {
+      $inputStream->write($input);
+    }
+
+    $inputStream->close();
+    $process->wait();
+
+    return $process;
+  }
+}
\ No newline at end of file
diff --git a/src/Process/TmpFileUsingProcessRunner.php b/src/Process/TmpFileUsingProcessRunner.php
new file mode 100644
index 0000000..637afc1
--- /dev/null
+++ b/src/Process/TmpFileUsingProcessRunner.php
@@ -0,0 +1,45 @@
+<?php
+
+declare(strict_types=1);
+
+namespace GrumPHP\Process;
+
+use GrumPHP\Exception\ProcessException;
+use Symfony\Component\Process\Process;
+
+/**
+ * This runner can be used to run a process whilst creating a file with temporary data.
+ * Once the command has finished, the temporary file is removed.
+ */
+class TmpFileUsingProcessRunner
+{
+  /**
+   * @param callable(string): Process $processBuilder
+   * @param callable(): \Generator<array-key, string, mixed, void> $writer
+   */
+  public static function run(callable $processBuilder, callable $writer): Process
+  {
+    if (!$tmp = tmpfile()) {
+      throw ProcessException::tmpFileCouldNotBeCreated();
+    }
+
+    $path = stream_get_meta_data($tmp)['uri'] ?? null;
+    if (!$path) {
+      throw ProcessException::tmpFileCouldNotBeCreated();
+    }
+
+    foreach ($writer() as $entry) {
+      fwrite($tmp, (string) $entry);
+    }
+    fseek($tmp, 0);
+
+    try {
+      $process = $processBuilder($path);
+      $process->run();
+    } finally {
+      fclose($tmp);
+    }
+
+    return $process;
+  }
+}
diff --git a/src/Task/Phpcs.php b/src/Task/Phpcs.php
index 5739362..a4b8e37 100644
--- a/src/Task/Phpcs.php
+++ b/src/Task/Phpcs.php
@@ -12,6 +12,8 @@ use GrumPHP\Task\Context\GitPreCommitContext;
 use GrumPHP\Task\Context\RunContext;
 use RuntimeException;
 use Symfony\Component\OptionsResolver\OptionsResolver;
+use GrumPHP\Process\TmpFileUsingProcessRunner;
+use Symfony\Component\Process\Process;

 class Phpcs extends AbstractExternalTask
 {
@@ -65,29 +67,29 @@ class Phpcs extends AbstractExternalTask
     {
         /** @var array $config */
         $config = $this->getConfiguration();
-        /** @var array $whitelistPatterns */
-        $whitelistPatterns = $config['whitelist_patterns'];
-        /** @var array $extensions */
-        $extensions = $config['triggered_by'];
-
-        /** @var \GrumPHP\Collection\FilesCollection $files */
-        $files = $context->getFiles();
-        if (\count($whitelistPatterns)) {
-            $files = $files->paths($whitelistPatterns);
-        }
-        $files = $files->extensions($extensions);
+
+        $files = $context->getFiles()
+            ->extensions($config['triggered_by'])
+            ->paths($config['whitelist_patterns'] ?? [])
+            ->notPaths($config['ignore_patterns'] ?? []);

         if (0 === \count($files)) {
             return TaskResult::createSkipped($this, $context);
         }

-        $arguments = $this->processBuilder->createArgumentsForCommand('phpcs');
-        $arguments = $this->addArgumentsFromConfig($arguments, $config);
-        $arguments->add('--report-json');
-        $arguments->addFiles($files);
+        $process = TmpFileUsingProcessRunner::run(
+            function (string $tmpFile) use ($config): Process {
+                $arguments = $this->processBuilder->createArgumentsForCommand('phpcs');
+                $arguments = $this->addArgumentsFromConfig($arguments, $config);
+                $arguments->add('--report-json');
+                $arguments->add('--file-list='.$tmpFile);

-        $process = $this->processBuilder->buildProcess($arguments);
-        $process->run();
+                return $this->processBuilder->buildProcess($arguments);
+            },
+            static function () use ($files): \Generator {
+              yield $files->toFileList();
+            }
+        );

         if (!$process->isSuccessful()) {
             $output = $this->formatter->format($process);
@@ -124,3 +126,4 @@ class Phpcs extends AbstractExternalTask
         return $arguments;
     }
 }
+
